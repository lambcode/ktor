description = 'Common tests for client'

apply plugin: "kotlinx-serialization"

class BackgroundJavaProcess extends JavaExec {
    public Thread thread = new Thread({ super.exec() })

    @TaskAction
    @Override
    public void exec() {
        thread.start()
        Thread.sleep(1000)
    }
}

kotlin.sourceSets {
    commonMain.dependencies {
        api project(':ktor-client:ktor-client-core')
        api project(':ktor-client:ktor-client-tests:ktor-client-tests-dispatcher')
        api project(':ktor-client:ktor-client-features:ktor-client-json')
    }
    jvmMain.dependencies {
        api project(':ktor-server:ktor-server-jetty')
        api project(':ktor-server:ktor-server-netty')
        api group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
        api group: 'junit', name: 'junit', version: junit_version
        api group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version
    }
    jvmTest.dependencies {
        runtimeOnly project(':ktor-client:ktor-client-apache')
        runtimeOnly project(':ktor-client:ktor-client-cio')
        runtimeOnly project(':ktor-client:ktor-client-android')
        runtimeOnly project(':ktor-client:ktor-client-okhttp')
        runtimeOnly project(':ktor-client:ktor-client-jetty')
    }
    jsTest.dependencies {
        api project(':ktor-client:ktor-client-js')
    }
    if (!project.ext.ideaActive) {
        configure([linuxX64Test, mingwX64Test, macosX64Test]) {
            dependencies {
                api project(':ktor-client:ktor-client-curl')
            }
        }

        configure([iosX64Test, iosArm32Test, iosArm64Test, macosX64Test]) {
            dependencies {
                api project(':ktor-client:ktor-client-ios')
            }
        }
    }
}

task startTestServer(type: BackgroundJavaProcess, dependsOn: assemble) {
    main = "io.ktor.client.tests.utils.TestServerKt"
    classpath = kotlin.targets.jvm.compilations["test"].runtimeDependencyFiles
}

if (!project.ext.ideaActive) {
    def testTasks = [macosX64Test, linuxX64Test, iosTest, mingwX64Test, jvmTest, testMochaChrome, testMochaNode]

    testTasks.each { it ->
        it.dependsOn startTestServer
    }
}

def shutdownServer() {
    try {
        def url = new URL("http://0.0.0.0:8080/shutdown")
        def connection = url.openConnection() as HttpURLConnection
        connection.requestMethod = "GET"
        connection.connect()
        def content = connection.getInputStream()
        content.readLines()
        content.close()
        connection.disconnect()
    } catch (ignored) {}
}

gradle.buildFinished {
    shutdownServer()
}

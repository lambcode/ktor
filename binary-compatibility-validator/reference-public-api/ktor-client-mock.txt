public final class io/ktor/client/engine/mock/MockEngine : io/ktor/client/engine/HttpClientEngine {
	public static final field Companion Lio/ktor/client/engine/mock/MockEngine$Companion;
	public fun <init> (Lio/ktor/client/engine/mock/MockEngineConfig;)V
	public fun close ()V
	public fun execute (Lio/ktor/client/call/HttpClientCall;Lio/ktor/client/request/HttpRequestData;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public synthetic fun getConfig ()Lio/ktor/client/engine/HttpClientEngineConfig;
	public fun getConfig ()Lio/ktor/client/engine/mock/MockEngineConfig;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getDispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
}

public final class io/ktor/client/engine/mock/MockEngine$Companion : io/ktor/client/engine/HttpClientEngineFactory {
	public fun create (Lkotlin/jvm/functions/Function1;)Lio/ktor/client/engine/HttpClientEngine;
	public final fun invoke (Lkotlin/jvm/functions/Function2;)Lio/ktor/client/engine/mock/MockEngine;
}

public final class io/ktor/client/engine/mock/MockEngineConfig : io/ktor/client/engine/HttpClientEngineConfig {
	public field check Lkotlin/jvm/functions/Function2;
	public fun <init> ()V
	public final fun getCheck ()Lkotlin/jvm/functions/Function2;
	public final fun setCheck (Lkotlin/jvm/functions/Function2;)V
}

public final class io/ktor/client/engine/mock/MockEngineExtended : io/ktor/client/engine/HttpClientEngine {
	public static final field Companion Lio/ktor/client/engine/mock/MockEngineExtended$Companion;
	public fun <init> (Lio/ktor/client/engine/HttpClientEngineConfig;)V
	public fun close ()V
	public final fun enqueueResponses ([Lkotlin/jvm/functions/Function1;)V
	public fun execute (Lio/ktor/client/call/HttpClientCall;Lio/ktor/client/request/HttpRequestData;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getConfig ()Lio/ktor/client/engine/HttpClientEngineConfig;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getDispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
	public final fun reset ()V
	public final fun takeRequest (I)Lio/ktor/client/engine/mock/MockHttpRequest;
	public static synthetic fun takeRequest$default (Lio/ktor/client/engine/mock/MockEngineExtended;IILjava/lang/Object;)Lio/ktor/client/engine/mock/MockHttpRequest;
}

public final class io/ktor/client/engine/mock/MockEngineExtended$Companion : io/ktor/client/engine/HttpClientEngineFactory {
	public synthetic fun create (Lkotlin/jvm/functions/Function1;)Lio/ktor/client/engine/HttpClientEngine;
	public fun create (Lkotlin/jvm/functions/Function1;)Lio/ktor/client/engine/mock/MockEngineExtended;
}

public final class io/ktor/client/engine/mock/MockHttpRequest : io/ktor/client/request/HttpRequest {
	public fun <init> (Lio/ktor/client/call/HttpClientCall;Lio/ktor/http/HttpMethod;Lio/ktor/http/Url;Lio/ktor/util/Attributes;Lio/ktor/http/content/OutgoingContent;Lio/ktor/http/Headers;)V
	public fun getAttributes ()Lio/ktor/util/Attributes;
	public fun getCall ()Lio/ktor/client/call/HttpClientCall;
	public fun getContent ()Lio/ktor/http/content/OutgoingContent;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getExecutionContext ()Lkotlinx/coroutines/Job;
	public fun getHeaders ()Lio/ktor/http/Headers;
	public fun getMethod ()Lio/ktor/http/HttpMethod;
	public fun getUrl ()Lio/ktor/http/Url;
}

public final class io/ktor/client/engine/mock/MockHttpRequestKt {
	public static final fun response (Lio/ktor/client/engine/mock/MockHttpRequest;Ljava/lang/String;Lio/ktor/http/HttpStatusCode;Lio/ktor/http/Headers;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static final fun response (Lio/ktor/client/engine/mock/MockHttpRequest;Lkotlinx/coroutines/io/ByteReadChannel;Lio/ktor/http/HttpStatusCode;Lio/ktor/http/Headers;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static final fun response (Lio/ktor/client/engine/mock/MockHttpRequest;[BLio/ktor/http/HttpStatusCode;Lio/ktor/http/Headers;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static synthetic fun response$default (Lio/ktor/client/engine/mock/MockHttpRequest;Ljava/lang/String;Lio/ktor/http/HttpStatusCode;Lio/ktor/http/Headers;ILjava/lang/Object;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static synthetic fun response$default (Lio/ktor/client/engine/mock/MockHttpRequest;Lkotlinx/coroutines/io/ByteReadChannel;Lio/ktor/http/HttpStatusCode;Lio/ktor/http/Headers;ILjava/lang/Object;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static synthetic fun response$default (Lio/ktor/client/engine/mock/MockHttpRequest;[BLio/ktor/http/HttpStatusCode;Lio/ktor/http/Headers;ILjava/lang/Object;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static final fun responseError (Lio/ktor/client/engine/mock/MockHttpRequest;Lio/ktor/http/HttpStatusCode;Ljava/lang/String;Lio/ktor/http/Headers;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static synthetic fun responseError$default (Lio/ktor/client/engine/mock/MockHttpRequest;Lio/ktor/http/HttpStatusCode;Ljava/lang/String;Lio/ktor/http/Headers;ILjava/lang/Object;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static final fun responseOk (Lio/ktor/client/engine/mock/MockHttpRequest;Ljava/lang/String;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static synthetic fun responseOk$default (Lio/ktor/client/engine/mock/MockHttpRequest;Ljava/lang/String;ILjava/lang/Object;)Lio/ktor/client/engine/mock/MockHttpResponse;
	public static final fun toRequest (Lio/ktor/client/request/HttpRequestData;Lio/ktor/client/call/HttpClientCall;)Lio/ktor/client/engine/mock/MockHttpRequest;
}

public final class io/ktor/client/engine/mock/MockHttpResponse : io/ktor/client/response/HttpResponse {
	public fun <init> (Lio/ktor/client/call/HttpClientCall;Lio/ktor/http/HttpStatusCode;Lkotlinx/coroutines/io/ByteReadChannel;Lio/ktor/http/Headers;)V
	public synthetic fun <init> (Lio/ktor/client/call/HttpClientCall;Lio/ktor/http/HttpStatusCode;Lkotlinx/coroutines/io/ByteReadChannel;Lio/ktor/http/Headers;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun close ()V
	public fun getCall ()Lio/ktor/client/call/HttpClientCall;
	public fun getContent ()Lkotlinx/coroutines/io/ByteReadChannel;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getExecutionContext ()Lkotlinx/coroutines/Job;
	public fun getHeaders ()Lio/ktor/http/Headers;
	public fun getRequestTime ()Lio/ktor/util/date/GMTDate;
	public fun getResponseTime ()Lio/ktor/util/date/GMTDate;
	public fun getStatus ()Lio/ktor/http/HttpStatusCode;
	public fun getVersion ()Lio/ktor/http/HttpProtocolVersion;
}

